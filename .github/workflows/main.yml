name: testcontainers packages
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  sphinx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/3.10.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r requirements/3.10.txt
      - name: Build documentation
        run: sphinx-build -nW . docs/_build
      - name: Run doctests
        run: sphinx-build -b doctest . docs/_build

  build:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
        test-component:
          - arangodb
          - azurite
          - clickhouse
          - compose
          - core
          - elasticsearch
          - google
          - kafka
          - keycloak
          - localstack
          - meta
          - minio
          - mongodb
          - mssql
          - mysql
          - neo4j
          - nginx
          - opensearch
          - oracle
          - postgres
          - rabbitmq
          - redis
          - selenium
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('requirements/{0}.txt', matrix.python-version)) }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/${{ matrix.python-version }}.txt
      - name: Run docker diagnostics
        if: matrix.test-component == 'core'
        run: |
          echo "Build minimal container for docker-in-docker diagnostics"
          docker build -f Dockerfile.diagnostics -t testcontainers-python .
          echo "Bare metal diagnostics"
          python diagnostics.py
          echo "Container diagnostics with bridge network"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --network=bridge testcontainers-python python diagnostics.py
          echo "Container diagnostics with host network"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --network=host testcontainers-python python diagnostics.py
      - name: Lint the code
        run: make ${{ matrix.test-component }}/lint
      - name: Run tests
        if: matrix.test-component != 'meta'
        run: make ${{ matrix.test-component }}/tests
      - name: Build the package
        run: make ${{ matrix.test-component }}/dist
      - name: Publish the package to pypi
        if: >
          github.event_name == 'push'
          && github.ref == 'refs/heads/master'
          && github.repository_owner == 'testcontainers'
          && matrix.python-version == '3.10'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
          TWINE_REPOSITORY: pypi
        run: make ${{ matrix.test-component }}/publish
